# -*- coding: utf-8 -*-
"""MitroDataAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14S33cNoUAloAn78LxeR1gGmZlhawiJ6G
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
from sklearn.impute import KNNImputer
import plotly.graph_objects as go

'''
Sponsors will find it easier for investing to the movies by knowing beforehand about the movies future performance
(whether the movie will become success or not). Also the audience will find it easier whether to buy tickets to
watch the movie or not, by knowing whether the movie would be considerably worthwhile to spend money to watch
in the theatre.

1) Find the most profited month of the year
2) Analyse the month with more number of movie releases
3) Analyse the relation between number of movies released in
a month and the most profited month in a year
'''


movie_data = pd.read_csv('/content/movie_dataset.csv')

# show all the columns of the dataset
movie_data.head()
# show the rows, rows x columns of the dataset
# (4803, 24)
movie_data.shape

movie_data.info()

# Data Analysis
qualitatives = movie_data.columns
# Display of number of qualitative variables
print('Number of qualitative variables: {}'.format(len(qualitatives)))
print(qualitatives)
# display categorical features
print('*'*38, 'Categorical Features', '*'*38)
# For these qualitative variables, display the missing data percentages, count nd values count
for col in qualitatives:
    print('*'*40, col, '*'*40)
    print('Type of {0}: {1}'.format(col, movie_data[col].dtype))
    print('Missing data percentage in {}'.format(col))
    print(movie_data[col].isna().sum()/movie_data.shape[0])
    print('Missing data count in {}'.format(col))
    print(movie_data[col].isna().sum())
    print('Values count in {}'.format(col))
    print(movie_data[col].value_counts())
    print('*'*100)

# Missing data per column/feature
features_stat =movie_data.isna().sum().rename('num_of_missing').reset_index()
features_stat.columns = ['feature', 'num_of_missing']
features_stat['percentage_of_missings'] = features_stat['num_of_missing'].apply(lambda x:x/len(movie_data))
features_stat.sort_values(by='percentage_of_missings',ascending=False)

# Plotting of the features that have missing data
#Plot a features have missing data
f, ax = plt.subplots(figsize=(12, 4))

sns.barplot(x='feature', y='percentage_of_missings', data=features_stat.sort_values(by='percentage_of_missings'))
plt.title('percentage of missing', fontsize=15)
plt.xlabel('features', fontsize=15)
plt.ylabel('percent', fontsize=15)
plt.xticks(rotation='vertical')
plt.show()

# Cleaning and preprocessing of the data
movie_data['keywords'].value_counts()

movie_data['keywords'].fillna('U',inplace=True)

movie_data.drop(['homepage','id','crew','tagline','overview','production_companies','production_countries','spoken_languages'],axis=1,inplace=True)


movie_data1= movie_data[['vote_count','vote_average','popularity']]
movie_data2=movie_data.drop(columns=['vote_count','vote_average','popularity'])
movie_data1

imputer = KNNImputer(n_neighbors=3)
imputed = imputer.fit_transform(movie_data1)
movie_data_imputed = pd.DataFrame(imputed, columns=movie_data1.columns)

movie_data_imputed

result = pd.concat([movie_data2, movie_data_imputed], axis=1)
result

result['release_date'].value_counts()

# Exploratory Data Analysis
# Using the fields are movie title, release date, budget,
# country, language, revenue, average vote and vote count.
# From the above-mentioned fields, using release date, month
# and year from it is derived to analyse the total number of
# movies month-wise

# Assuming movie_data is your DataFrame with columns 'release_date', 'month', and 'year'
movie_data['release_date'] = pd.to_datetime(movie_data['release_date'], format='%d-%m-%Y')
movie_data['month'] = movie_data['release_date'].dt.month
movie_data['year'] = movie_data['release_date'].dt.year
revenue = movie_data['revenue']
print(revenue)

# Assuming you have a DataFrame called movie_data with a 'month' column
#movie_data['month'].value_counts().sort_values().reset_index(start=1)
# Plot the bar plot
#number_of_movies.plot(kind='bar', figsize=(10, 6))
plt.xlabel('Month')
plt.ylabel('Number of Movies')
# Assuming you have a DataFrame called movie_data with a column named 'month'
plt.bar(movie_data['month'].value_counts().index, height=movie_data['month'].value_counts())
plt.show()

# Assuming you have a DataFrame called movie_data with a 'month' column
month_counts = movie_data['month'].value_counts()
month_labels = month_counts.index
print(month_labels)

# Create a pie chart with the counts as percentages and display the number of each month
plt.pie(month_counts, labels=month_labels, startangle=90, autopct='%1.1f%%')
#plt.pie(month_counts, labels=month_labels, startangle=90, autopct=lambda p: '{:.1f}%'.format(p * 100 / sum(month_counts)))

# Customize the pie chart
plt.title("Month Distribution in Movie Data")
plt.axis('equal')

# Show the pie chart
plt.show()

# can add an additional check here based on the country of release



# Most profited month of the year
revenue = movie_data['revenue']


# Assuming movie_data is your DataFrame containing revenue and release_date columns
top_revenue_rows = movie_data.sort_values(by='revenue', ascending=False).head(10)

top_revenue_movies = movie_data.loc[top_revenue_rows.index].reset_index(drop=True)

release_dates = top_revenue_movies['release_date'].tolist()

print("Top revenue rows:")
print(top_revenue_movies)

print("Release dates:")
print(release_dates)


original_titles = top_revenue_movies['original_title'].tolist()
production_countries = top_revenue_movies['production_countries'].tolist()

# Create a plot for the top revenue movies in the months from the release dates
fig1 = go.Figure()
fig1.add_trace(go.Scatter(x=top_revenue_movies['release_date'], y=top_revenue_movies['revenue'], mode='markers+text', text=original_titles))
fig1.update_layout(title='Top Revenue Movies by Month', xaxis_title='Release Date', yaxis_title='Revenue')
fig1.show()

# Create a plot for the years of the release dates
fig2 = go.Figure()
fig2.add_trace(go.Bar(x=release_dates, y=top_revenue_movies['revenue'].tolist(), name='Revenue by Year', text=original_titles))
fig2.update_layout(title='Revenue by Year', xaxis_title='Release Year', yaxis_title='Revenue')
fig2.show()

# Create a plot for the top revenue movies in the months from the release dates, considering production countries
fig3 = go.Figure()
fig3.add_trace(go.Scatter(x=top_revenue_movies['production_countries'], y=top_revenue_movies['revenue'], mode='markers+text', text=original_titles))
fig3.update_layout(title='Top Revenue Movies by Month and Production Country', xaxis_title='Release Date', yaxis_title='Revenue')
fig3.show()

# Create a plot for the years of the release dates, considering production countries
fig4 = go.Figure()
fig4.add_trace(go.Bar(x=production_countries, y=top_revenue_movies['revenue'].tolist(), name='Revenue by Year and Production Country'))
fig4.update_layout(title='Revenue by Year and Production Country', xaxis_title='Release Year', yaxis_title='Revenue')
fig4.show()


# Reshape the data to have a single row for each movie and a column for the revenue and release_date
top_revenue_movies_melted = top_revenue_movies.melt(id_vars='title', var_name='month', value_name='revenue')

# Create the bar chart using plotly.express.bar
fig = px.bar(top_revenue_movies_melted, x='month', y='revenue', color='title', labels={'title':'Movie'})

# Show the plot
fig.show()

# Month with more number of Movie releases

# COuntry with more number of movie releases

# Assuming you have a DataFrame called movie_data with a 'month' column
country_counts = movie_data['production_countries'].value_counts()[:7]
country_labels = country_counts.index[:7]
#print(country_labels)

# Create a pie chart with the counts as percentages and display the number of each month
plt.pie(country_counts, labels=country_labels, startangle=500, autopct='%1.1f%%')

# Assuming you have a DataFrame called movie_data with a 'month' column
month_counts = movie_data['production_countries'].value_counts()[:7]
month_labels = month_counts.index[:7]

# Create a bar plot with the counts as percentages and display the number of each month
fig = px.bar(month_counts, labels=month_labels, orientation='h', width=1000)
fig.update_layout(title='Number of Movies per Country', xaxis_title='Number of Movies', yaxis_title='Country')
fig.update_traces(text='number of movies')
fig.show()

# Language with more number of movie releases pie chart

# COuntry with more number of movie releases

# Assuming you have a DataFrame called movie_data with a 'month' column
country_counts = movie_data['production_countries'].value_counts()[:7]
country_labels = country_counts.index[:7]
#print(country_labels)

# Create a pie chart with the counts as percentages and display the number of each month
plt.pie(country_counts, labels=country_labels, startangle=500, autopct='%1.1f%%')

# Language with more number of movie releases graph plot
# Assuming you have a DataFrame called movie_data with a 'month' column
month_counts = movie_data['original_language'].value_counts()[:7]
month_labels = month_counts.index[:7]

# Create a bar plot with the counts as percentages and display the number of each month
fig = px.bar(month_counts, labels=month_labels, orientation='h', width=1000)
fig.update_layout(title='Number of Movies per Language', xaxis_title='Number of Movies', yaxis_title='Language')
fig.update_traces(text='number of movies')
fig.show()

# Genres with more number of movie releases pie chart
# Language with more number of movie releases pie chart

# COuntry with more number of movie releases

# Assuming you have a DataFrame called movie_data with a 'month' column
country_counts = movie_data['original_language'].value_counts()[:7]
country_labels = country_counts.index[:7]
#print(country_labels)

# Create a pie chart with the counts as percentages and display the number of each month
plt.pie(country_counts, labels=country_labels, startangle=500, autopct='%1.1f%%')

# Genres with more number of movie releases pie chart
# Language with more number of movie releases pie chart

# COuntry with more number of movie releases

# Language with more number of movie releases graph plot
# Assuming you have a DataFrame called movie_data with a 'month' column
month_counts = movie_data['genres'].value_counts()[:7]
month_labels = month_counts.index[:7]

# Create a bar plot with the counts as percentages and display the number of each month
fig = px.bar(month_counts, labels=month_labels, orientation='h', width=1000)
fig.update_layout(title='Number of Movies per Genre', xaxis_title='Number of Movies', yaxis_title='Genre')
fig.update_traces(text='number of movies')
fig.show()

# can also add the countries with most usage

# Genres with more number of movie releases pie chart
# Language with more number of movie releases pie chart

# COuntry with more number of movie releases

# Assuming you have a DataFrame called movie_data with a 'month' column
country_counts = movie_data['genres'].value_counts()[:7]
country_labels = country_counts.index[:7]
#print(country_labels)

# Create a pie chart with the counts as percentages and display the number of each month
plt.pie(country_counts, labels=country_labels, startangle=500, autopct='%1.1f%%')

# Also include the other code analysis that was implemented from the relevant site